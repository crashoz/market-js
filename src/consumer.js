const EventEmitter = require('events');
const DB = require('./db');
const logger = require('./logger');
const Config = require('./config');

const logName = '[Consumer]';
const periods = Config.periods;

/**
 * Consumes price data generated by a provider and adds it to the database
 */
class Consumer extends EventEmitter {
  constructor(provider) {
    super();
    this.acc = {};
    this.lastTime = {};
    provider.on('trades', this.consume.bind(this))
  }

/**
 * Accumulate trading data into candles and saves them to the database
 * @param  {String} pair The pair we are working on
 * @param  {Integer} time Timestamp in milliseconds
 * @param  {Float} price Unit price
 * @param  {Float} volume Quantity traded
 * @return {}
 */
  consume(pair, time, volume, price) {
    if (this.acc[pair] === undefined) {
      // Initialize accumulators
      this.acc[pair] = {};
      this.lastTime[pair] = {}
      Object.keys(periods).forEach(pname => {
        const plength = periods[pname];
        const ptime = Math.floor(time / plength) * plength;
        this.acc[pair][pname] = {
          pair: pair,
          timestamp: ptime,
          open: price,
          high: price,
          low: price,
          close: price,
          volume: volume
        };
        this.lastTime[pair][pname] = ptime;
      });
      return;
    }

    Object.keys(periods).forEach(pname => {
      const plength = periods[pname];
      const ptime = Math.floor(time / plength) * plength;

      if (this.lastTime[pair][pname] < ptime) {
        this.lastTime[pair][pname] = time;

        // Close last candle
        let candle = this.acc[pair][pname];
        DB.addCandle(pname, candle).then(() => {
          this.emit(pname, candle);
        })

        // Open new candle
        this.acc[pair][pname] = {
          pair: pair,
          timestamp: ptime,
          open: price,
          high: price,
          low: price,
          close: price,
          volume: volume
        };
      } else {
        // Continue candle
        const candle = this.acc[pair][pname];
        this.acc[pair][pname] = {
          pair: candle.pair,
          timestamp: candle.timestamp,
          open: candle.open,
          high: Math.max(candle.high, price),
          low: Math.min(candle.low, price),
          close: price,
          volume: candle.volume + volume
        };
      }
    });
  }
}

module.exports = Consumer;
